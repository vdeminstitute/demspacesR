% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/reg-logreg.R
\name{reg_logreg}
\alias{reg_logreg}
\title{Reguarized logistic regression}
\usage{
reg_logreg(x, y, folds = 5, alpha_n = 3, cost = "mse", lambda = "1se")
}
\arguments{
\item{x}{Data frame with features.}

\item{y}{Binary vector indicating outcome event.}

\item{folds}{Number of folds to use for CV tuning}

\item{alpha_n}{Number of alpha values to sample for CV tuning}

\item{cost}{Cost measure to use, see \code{\link[glmnet:cv.glmnet]{glmnet::cv.glmnet()}}}

\item{lambda}{Decision rule to pick lambda, one of "min", "1se", "0.5se"}
}
\description{
Standardized interface for self-tuning regularized logistic regression.
}
\details{
Tuning is performed using cross-validation with \code{\link[glmnet:cv.glmnet]{glmnet::cv.glmnet()}}.
Both lambda and alpha values are tuned. The lambda values are left to the
model default and a uniform grid of alpha values is used. The lambda value
is picked with \code{\link[glmnet:cv.glmnet]{glmnet::cv.glmnet()}}'s more robust 1se value (i.e. not the
absolute minimum, but closest value within 1 SD of the minimum value). Then
the globally optimum alpha value is picked.
}
\examples{
library(modeldata)
data(credit_data)
credit_data <- credit_data[complete.cases(credit_data), ]

mdl <- reg_logreg(credit_data[, setdiff(colnames(credit_data), "Status")],
                    credit_data$Status,
                    folds = 5, alpha_n = 4)
# plots to review tuning results
plot(mdl)
plot(mdl, "alpha")
plot(mdl, "lambda")
preds <- predict(mdl, new_data = credit_data)
head(preds)

}
\seealso{
Other Other base models: 
\code{\link{logistic_reg_featx}()},
\code{\link{logistic_reg}()}
}
\concept{Other base models}
\concept{base_model}
